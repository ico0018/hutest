'''
滑动窗口是一种常用的算法技巧，用于解决一类涉及区间或子串的问题。在滑动窗口算法中，我们通常使用两个指针（左指针和右指针）来维护一个窗口，通过移动这两个指针，可以在特定条件下找到满足要求的子串或区间。下面是一个用于解题的滑动窗口算法思路和通用模板：

解题思路：

使用两个指针（通常是左指针和右指针）表示窗口的起始和结束位置。
初始化左指针和右指针，并根据问题的要求初始化其他变量（例如，最小长度、最大长度、满足条件的数量等）。
开始移动右指针，扩展窗口，直到满足某个条件为止。在扩展窗口的过程中，可以更新窗口内的状态或计算特定的值。
当满足条件后，开始移动左指针，收缩窗口，直到不再满足条件为止。在收缩窗口的过程中，同样可以更新窗口内的状态或计算特定的值。
在每次移动指针（无论是左指针还是右指针）时，都可以根据问题的要求进行额外的操作或更新答案。
重复步骤3和步骤4，直到右指针到达数组或字符串的末尾。
返回满足条件的子串或区间，或者根据问题要求返回特定的值。
'''
def sliding_window(s):
    left, right = 0, 0  # 初始化左指针和右指针
    window = {}  # 用字典或哈希表来存储窗口内的状态信息
    result = []

    while right < len(s):
        # 扩展窗口，移动右指针
        window[s[right]] = window.get(s[right], 0) + 1
        right += 1

        # 判断是否满足条件
        while window[some_condition]:
            # 收缩窗口，移动左指针
            window[s[left]] -= 1
            left += 1

        # 在这里可以根据问题的要求更新答案或进行其他操作

    return result  # 返回满足条件的子串或区间，或者根据问题要求返回特定的值
